// Code generated by github.com/wantedly/subee/cmd/subee. DO NOT EDIT.

package consumer

import (
	"context"
	"encoding/json"

	e "example.com/a/b/d"
	"github.com/pkg/errors"
	"github.com/wantedly/subee"
)

// NewAuthorBatchConsumerAdapter created a consumer-adapter instance that converts incoming messages into e.Author.
func NewAuthorBatchConsumerAdapter(consumer AuthorBatchConsumer) subee.BatchConsumer {
	return &authorBatchConsumerAdapterImpl{consumer: consumer}
}

type authorBatchConsumerAdapterImpl struct {
	consumer AuthorBatchConsumer
}

func (a *authorBatchConsumerAdapterImpl) BatchConsume(ctx context.Context, ms []subee.Message) error {
	var err error
	objs := make([]*e.Author, len(ms))
	for i, m := range ms {
		obj := new(e.Author)
		err = json.Unmarshal(m.Data(), obj)
		if err != nil {
			return errors.WithStack(err)
		}
		objs[i] = obj
	}
	err = a.consumer.BatchConsume(ctx, objs)
	if err != nil {
		return errors.WithStack(err)
	}
	return nil
}

